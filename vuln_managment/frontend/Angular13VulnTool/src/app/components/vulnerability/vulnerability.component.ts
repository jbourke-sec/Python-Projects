import { Component, Inject, Input, OnInit } from '@angular/core';
import { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';
import { ActivatedRoute, Router } from '@angular/router';
import { Vulnerability } from 'src/app/models/vulnerability.model';
import { TicketsService } from 'src/app/services/tickets.service';
import { TokenStorageService } from 'src/app/_services/token-storage.service';

@Component({
  selector: 'app-vulnerability',
  templateUrl: './vulnerability.component.html',
  styleUrls: ['./vulnerability.component.css']
})
export class VulnerabilityComponent implements OnInit {

  taglist: string[] = [];
  vendor: string = '';
  tech: string = '';

  @Input() viewMode = false;
  @Input() currentVuln: Vulnerability = {
      vulnid: "",
      assetid: [],
      threat: "",
      cve: '',
      cpe: '',
      risk: '',
      baseSLA: undefined,
      cwe: '',
      mav: '',
      mac: '',
      mpr: '',
      mui: '',
      ms: '',
      mc: '',
      mi: '',
      ma: '',
      rl: '',
      rc: '',
      ecm: '',
      description: '',
    };

    scope: any[] = [
      {value: 'Not Defined', viewValue: 'Not Defined'},
      {value: 'Unchanged', viewValue: 'Unchanged'},
      {value: 'Changed', viewValue: 'Changed'},
    ];
  
    mui: any[] = [
      {value: 'Not Defined', viewValue: 'Not Defined'},
      {value: 'None', viewValue: 'None'},
      {value: 'Required', viewValue: 'Required'},
    ];
    mac: any[] = [
      {value: 'Not Defined', viewValue: 'Not Defined'},
      {value: 'Low', viewValue: 'Low Requirement'},
      {value: 'High', viewValue: 'High Requirement'},
    ];
  
    mav: any[] = [
      {value: 'Network', viewValue: 'Network'},
      {value: 'Adjacent Network', viewValue: 'Adjacent'},
      {value: 'Local', viewValue: 'Local'},
      {value: 'Physical', viewValue: 'Physical'},
    ];
    mpr: any[] = [
     
      {value: 'Not Defined', viewValue: 'Not Defined'},
      {value: 'None', viewValue: 'None'}, 
      {value: 'Low', viewValue: 'Low Requirement'},
      {value: 'High', viewValue: 'High Requirement'},
    ];
    ecm: any[] = [
      {value: 'High',viewValue: 'High'},
      {value: 'Functional exploit exists',viewValue: 'Functional exploit exists'},
      {value: 'Proof of concept code',viewValue: 'Proof of concept code'},
      {value: 'Unproven that exploit exists', viewValue: 'Unproven that exploit exists'},
      {value: 'Not Defined',viewValue: 'Not Defined'},
   ];
    RL: any[] = [
      {value: 'Unavailable',viewValue: 'Unavailable'},
      {value: 'Workaround', viewValue: 'Workaround'},
      {value: 'Temporary fix',viewValue: 'Temporary fix'},
      {value: 'Official fix',viewValue: 'Official fix'},
      {value: 'Not Defined', viewValue: 'Not Defined'},
  ];
  RC: any[] = [
      {value: 'Unknown', viewValue: 'Unknown'},
      {value: 'Reasonable', viewValue: 'Reasonable'},
      {value: 'Confirmed', viewValue: 'Confirmed'},
      {value: 'Not Defined', viewValue: 'Not Defined'},
  ];
  message = '';
  constructor(
    private ticketService: TicketsService,
    private route: ActivatedRoute,
    private router: Router,
    public dialogRef: MatDialogRef<VulnerabilityComponent>,
    @Inject(MAT_DIALOG_DATA) public data: string,
    public tokenStorage: TokenStorageService) { }
    


  ngOnInit(): void {
    if (!this.tokenStorage.getToken()) {
      this.router.navigate(['/login']);
    }
    if (!this.viewMode) {
      this.message = '';
      this.getVuln(this.data);//may be number
    }
  }
  getVuln(id: string): void {
    this.ticketService.getVuln(id)
      .subscribe({
        next: (data) => {
          this.currentVuln = data;
          console.log(data);
        },
        error: (e) => console.error(e)
      });
  }

  updateVuln(): void {
    this.message = '';
    if(this.taglist.length != 0){
      this.currentVuln.cpe = this.taglist.toString();
    }
    else if(this.currentVuln.cpe == '' || this.currentVuln.cpe == 'None')
    {
      this.currentVuln.cpe = 'None';
    }
    this.ticketService.updateVuln(this.currentVuln.vulnid, this.currentVuln)
      .subscribe({
        next: (res) => {
          console.log(res);
          this.message = res.message ? res.message : 'This Vulnerability was updated successfully!';
        },
        error: (e) => console.error(e)
      });
  }
  deleteVuln(): void {
    this.ticketService.deleteVuln(this.currentVuln.vulnid)
      .subscribe({
        next: (res) => {
          console.log(res);
          this.router.navigate(['/vuln']);
        },
        error: (e) => console.error(e)
      });
  }
  closeVuln() {
    this.dialogRef.close();
  }

  viewTags(): void {
    this.message = '';
      if(this.currentVuln.cpe !== '' && this.currentVuln.cpe !== 'None')
      {
        this.taglist = this.currentVuln.cpe.split(" ");
        console.log(this.taglist);
      }

  }
  removeTag(str: string){
    const index: number = this.taglist.indexOf(str);
    if (index !== -1) {
        this.taglist.splice(index, 1);
  }
}
  addTag(vend: string, tech: string){
    this.message = '';
    vend.replace(' ', '');
    tech.replace(' ', '');
    vend.replace(':', '');
    tech.replace(':', '');
    if(vend == '' || tech == '')
    {
      this.message = "Vendor or Product missing values"
    }
    else
    {
      var str = "cpe:2.3:a:".concat(vend, ':', tech, ':*:*:*:*:*:*:*:*')
      const index: number = this.taglist.indexOf(str);
      if (index === -1) 
      {
        this.taglist.push(str);
      }
      else
      {
        this.message = "Duplicate Value";
      }  
    }
    
  }

}
