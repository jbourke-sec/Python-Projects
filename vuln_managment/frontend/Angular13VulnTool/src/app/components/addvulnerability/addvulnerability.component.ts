import { Component, OnInit } from '@angular/core';
import { Vulnerability } from 'src/app/models/vulnerability.model';
import { TicketsService } from 'src/app/services/tickets.service';

@Component({
  selector: 'app-addvulnerability',
  templateUrl: './addvulnerability.component.html',
  styleUrls: ['./addvulnerability.component.css']
})
export class AddvulnerabilityComponent implements OnInit {

  submitted = false;
  message: string = '';
  taglist: string[] = [];
  vendor: string = '';
  tech: string = '';
  vuln: Vulnerability = {
    vulnid: "",
    assetid: [],
    threat: "",
    cve: '',
    cpe: '',
    risk: '',
    baseSLA: undefined,
    cwe: '',
    mav: '',
    mac: '',
    mpr: '',
    mui: '',
    ms: '',
    mc: '',
    mi: '',
    ma: '',
    rc: '',
    rl: '',
    ecm: '',
    description: '',
  };

  scope: any[] = [
    {value: 'Not Defined', viewValue: 'Not Defined'},
    {value: 'Unchanged', viewValue: 'Unchanged'},
    {value: 'Changed', viewValue: 'Changed'},
  ];

  mui: any[] = [
    {value: 'Not Defined', viewValue: 'Not Defined'},
    {value: 'None', viewValue: 'None'},
    {value: 'Required', viewValue: 'Required'},
  ];
  mac: any[] = [
    {value: 'Not Defined', viewValue: 'Not Defined'},
    {value: 'Low', viewValue: 'Low Requirement'},
    {value: 'High', viewValue: 'High Requirement'},
  ];

  mav: any[] = [
    {value: 'Network', viewValue: 'Network'},
    {value: 'Adjacent Network', viewValue: 'Adjacent'},
    {value: 'Local', viewValue: 'Local'},
    {value: 'Physical', viewValue: 'Physical'},
  ];
  mpr: any[] = [
   
    {value: 'Not Defined', viewValue: 'Not Defined'},
    {value: 'None', viewValue: 'None'}, 
    {value: 'Low', viewValue: 'Low Requirement'},
    {value: 'High', viewValue: 'High Requirement'},
  ];
  ecm: any[] = [
    {value: 'High',viewValue: 'High'},
    {value: 'Functional exploit exists',viewValue: 'Functional exploit exists'},
    {value: 'Proof of concept code',viewValue: 'Proof of concept code'},
    {value: 'Unproven that exploit exists', viewValue: 'Unproven that exploit exists'},
    {value: 'Not Defined',viewValue: 'Not Defined'},
 ]
 RL: any[] = [
     {value: 'Unavailable',viewValue: 'Unavailable'},
     {value: 'Workaround', viewValue: 'Workaround'},
     {value: 'Temporary fix',viewValue: 'Temporary fix'},
     {value: 'Official fix',viewValue: 'Official fix'},
     {value: 'Not Defined',viewValue: 'Not Defined'},
 ]
 RC: any[] = [
     {value: 'Unknown', viewValue: 'Unknown'},
     {value: 'Reasonable',viewValue: 'Reasonable'},
     {value: 'Confirmed',viewValue: 'Confirmed'},
     {value: 'Not Defined',viewValue: 'Not Defined'},
 ]

  constructor(private ticketService: TicketsService) { }

  ngOnInit(): void {
  }
  newVuln(): void {
    this.submitted = false;
    this.vuln = {
    assetid: [],
    threat: "",
    cve: '',
    cpe: '',
    risk: '',
    baseSLA: undefined,
    cwe: '',
    mav: '',
    mac: '',
    mpr: '',
    mui: '',
    ms: '',
    mc: '',
    mi: '',
    ma: '',
    rl: '',
    rc: '',
    ecm: '',
    description: '',
    }
    
    
    };
    saveVuln(): void 
    {
      if(this.taglist.length != 0){
        this.vuln.cpe = this.taglist.toString();
      }
      else if(this.vuln.cpe == '' || this.vuln.cpe == 'None')
      {
        this.vuln.cpe = 'None';
      }
      const data = 
      {
          assetid: this.vuln.assetid,
          threat: this.vuln.threat,
          cve: this.vuln.cve,
          cpe: this.vuln.cpe,
          risk: this.vuln.risk,
          baseSLA: this.vuln.baseSLA,
          cwe: this.vuln.cwe,
          mav: this.vuln.mav,
          mac: this.vuln.mac,
          mpr: this.vuln.mpr,
          mui: this.vuln.mui,
          ms: this.vuln.ms,
          mc: this.vuln.mc,
          mi: this.vuln.mi,
          ma: this.vuln.ma,
          rl: this.vuln.rl,
          rc: this.vuln.rc,
          ecm: this.vuln.ecm,
          description: this.vuln.description
      }
      this.ticketService.createVuln(data)
      .subscribe({
        next: (res) => {
          console.log(res);
          this.submitted = true;
        },
        error: (e) => console.error(e)
      });
    };

    viewTags(): void {
      this.message = '';
        if(this.vuln.cpe !== '' && this.vuln.cpe !== '')
        {
          this.taglist = this.vuln.cpe.split(" ");
          console.log(this.taglist);
        }
  
    }
    removeTag(str: string){
      const index: number = this.taglist.indexOf(str);
      if (index !== -1) {
          this.taglist.splice(index, 1);
    }
  }
    addTag(vend: string, tech: string){
      this.message = '';
      vend.replace(' ', '');
      tech.replace(' ', '');
      vend.replace(':', '');
      tech.replace(':', '');
      if(vend == '' || tech == '')
      {
        this.message = "Vendor or Product missing values"
      }
      else
      {
        var str = "cpe:2.3:a:".concat(vend, ':', tech, ':*:*:*:*:*:*:*:*')
        const index: number = this.taglist.indexOf(str);
        if (index === -1) 
        {
          this.taglist.push(str);
        }
        else
        {
          this.message = "Duplicate Value";
        }  
      }
      
    }
}
